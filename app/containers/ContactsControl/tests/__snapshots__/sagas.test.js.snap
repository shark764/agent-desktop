// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getInteraction generator if interactionId is any other string should complete and yield the interaction with the specified id 1`] = `
Object {
  "done": true,
  "value": Object {
    "interactionId": "mockInteractionId",
  },
}
`;

exports[`getInteraction generator if interactionId is any other string should select the interaction List 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`getInteraction generator if interactionId is creating-new-interaction should complete and yield the selected interaction 1`] = `
Object {
  "done": true,
  "value": "mockNewInteractionPanel",
}
`;

exports[`getInteraction generator if interactionId is creating-new-interaction should select the new interaction contact panel 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`getInteraction generator if interactionId is undefined should complete and yield the selected interaction 1`] = `
Object {
  "done": true,
  "value": "mockNoInteractionPanel",
}
`;

exports[`getInteraction generator if interactionId is undefined should select the no interaction contact panel 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`goAddContactErrorNotification Saga should put the addNotification action with correct keys 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notification": Object {
          "id": 234,
          "isError": true,
          "mockNotificationInfo": "mockNotificationInfo",
        },
        "type": "app/InfoTab/ADD_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAddContactErrorNotification Saga should select the next notification id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`goAddContactNotification Saga should delay for 3000ms 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        3000,
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAddContactNotification Saga should put the addNotification action with correct keys 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notification": Object {
          "id": 234,
          "isError": false,
          "mockNotificationInfo": "mockNotificationInfo",
        },
        "type": "app/InfoTab/ADD_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAddContactNotification Saga should put the dismissNotification action with the selected id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "id": 234,
        "type": "app/InfoTab/DISMISS_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAddContactNotification Saga should select the next notification id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is defined should init form with contact values 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactForm": Object {
          "attribute1": "contact attribute 1",
          "attribute2": "contact attribute 2",
        },
        "formErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "interactionId": "mockInteractionId",
        "selectedIndexes": undefined,
        "showErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "type": "app/ContactsControl/INIT_FORM",
        "unusedFields": undefined,
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is defined should set contact mode to "edit" 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "edit",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is defined should set default values (or blank strings) for attributes created after contact is created 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactForm": Object {
          "attribute1": "contact attribute 1",
          "attribute2": "contact attribute 2",
          "attribute3": "A new value",
          "attribute4": "",
        },
        "formErrors": Object {
          "attribute1": false,
          "attribute2": false,
          "attribute3": false,
          "attribute4": false,
        },
        "interactionId": "mockInteractionId",
        "selectedIndexes": undefined,
        "showErrors": Object {
          "attribute1": false,
          "attribute2": false,
          "attribute3": false,
          "attribute4": false,
        },
        "type": "app/ContactsControl/INIT_FORM",
        "unusedFields": undefined,
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is defined should set editing contacts to provided contact in array 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contacts": Array [
          Object {
            "attributes": Object {
              "attribute1": "contact attribute 1",
              "attribute2": "contact attribute 2",
            },
          },
        ],
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/SET_EDITING_CONTACTS",
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is undefined should init form with default values 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactForm": Object {
          "attribute1": "attribute",
          "attribute2": "",
        },
        "formErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "interactionId": "mockInteractionId",
        "selectedIndexes": undefined,
        "showErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "type": "app/ContactsControl/INIT_FORM",
        "unusedFields": undefined,
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is undefined should set contact mode to "create" 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "create",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goEditContact Saga when action.contact is undefined should set editing contacts to an empty object in an array 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contacts": Array [
          Object {},
        ],
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/SET_EDITING_CONTACTS",
      },
      "channel": null,
    },
  },
}
`;

exports[`goMergeContacts saga should init form with contact values and selected indexes 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactForm": Object {
          "attribute1": "contact 1",
          "attribute2": "",
        },
        "formErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "interactionId": "mockInteractionId",
        "selectedIndexes": Object {
          "attribute1": 0,
        },
        "showErrors": Object {
          "attribute1": false,
          "attribute2": false,
        },
        "type": "app/ContactsControl/INIT_FORM",
        "unusedFields": Object {
          "attribute1": "contact 2",
        },
      },
      "channel": null,
    },
  },
}
`;

exports[`goMergeContacts saga should set contact mode to "merge" 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "merge",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goMergeContacts saga should set default values (or blank strings) for attributes created after contact is created 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactForm": Object {
          "attribute1": "contact 1",
          "attribute2": "",
          "attribute3": "A new value",
          "attribute4": "",
        },
        "formErrors": Object {
          "attribute1": false,
          "attribute2": false,
          "attribute3": false,
          "attribute4": false,
        },
        "interactionId": "mockInteractionId",
        "selectedIndexes": Object {
          "attribute1": 0,
        },
        "showErrors": Object {
          "attribute1": false,
          "attribute2": false,
          "attribute3": false,
          "attribute4": false,
        },
        "type": "app/ContactsControl/INIT_FORM",
        "unusedFields": Object {
          "attribute1": "contact 2",
        },
      },
      "channel": null,
    },
  },
}
`;

exports[`goMergeContacts saga should set editing contacts to checked contacts in array 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contacts": Array [
          Object {
            "attributes": Object {
              "attribute1": "contact 1",
              "attribute2": "",
            },
            "id": "contactId1",
          },
          Object {
            "attributes": Object {
              "attribute1": "contact 2",
              "attribute2": "",
            },
            "id": "contactId2",
          },
        ],
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/SET_EDITING_CONTACTS",
      },
      "channel": null,
    },
  },
}
`;

exports[`goMergeContacts saga should set form validity to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "formIsValid": true,
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/SET_FORM_VALIDITY",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should call the getInteraction generator with the interactionId 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockInteractionId",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should call the promise util with the contact create SDK method and correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockContactCreate",
        Object {
          "attributes": "mockContactForm",
        },
        "ContactsControl",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a addContactNotification action with correct message type 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notificationInfo": Object {
          "messageType": "created",
        },
        "type": "app/ContactsControl/ADD_CONTACT_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a contactAssign action with the created contact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": "mockCreatedContact",
        "interactionId": "mockInteractionId",
        "skipUnassign": undefined,
        "type": "app/AgentDesktop/ASSIGN_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a resetForm action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/RESET_FORM",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a set contact mode action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "view",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a setContactSaveLoading false action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactCreate Saga should put a setContactSaveLoading true action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should call the getInteraction generator with the interactionId 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockInteractionId",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should call the promise util with the contact update SDK method and correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockContactUpdate",
        Object {
          "attributes": "mockContactForm",
          "contactId": "mockContactId",
        },
        "ContactsControl",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should put a addContactNotification action with correct message type 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notificationInfo": Object {
          "messageType": "saved",
        },
        "type": "app/ContactsControl/ADD_CONTACT_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should put a resetForm action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/RESET_FORM",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should put a set contact mode action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "search",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should put a setContactSaveLoading false action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactEdit Saga should put a setContactSaveLoading true action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should call the getInteraction generator with the interactionId 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockInteractionId",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should call the promise util with the contact merge SDK method and correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockContactMerge",
        Object {
          "attributes": "mockContactForm",
          "contactIds": Array [
            "mockContactId",
            "mockContactId1",
          ],
        },
        "ContactsControl",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a addContactNotificationAction with correct message type 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notificationInfo": Object {
          "messageType": "merged",
        },
        "type": "app/ContactsControl/ADD_CONTACT_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a remove search filter action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "filterName": undefined,
        "type": "app/AgentDesktop/REMOVE_SEARCH_FILTER",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a resetForm action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "type": "app/ContactsControl/RESET_FORM",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a set contact mode action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "newMode": "view",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a setContactSaveLoading false action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should put a setContactSaveLoading true action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "mockInteractionId",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should select the interactionsList 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "SELECT": Object {
      "args": Array [],
      "selector": [Function],
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should yield an assign contact put for action interaction 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": "mockNewContact",
        "interactionId": "mockInteractionId",
        "skipUnassign": undefined,
        "type": "app/AgentDesktop/ASSIGN_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goSubmitContactMerge Saga should yield an assign contact put for each affected interaction 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contact": "mockNewContact",
          "interactionId": "mockInteractionId1",
          "skipUnassign": undefined,
          "type": "app/AgentDesktop/ASSIGN_CONTACT",
        },
        "channel": null,
      },
    },
  ],
}
`;
