// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Hold /> with canUpdateHold renders icon 1`] = `
<InjectIntl(CircleIconButton)
  active={false}
  id="holdButton"
  loading={true}
  name="hold"
  onClick={[Function]}
  style={
    Object {
      "padding": "0 1.5px",
    }
  }
  title={
    Object {
      "defaultMessage": "Put Customer On Hold",
      "id": "app.containers.PhoneControls.hold",
    }
  }
/>
`;

exports[`<Hold /> with false canUpdateHold renders nothing 1`] = `""`;

exports[`<Hold /> with false isOnHold calls CxEngage.interactions.voice.customerHold with the interactionId 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "interactionId": "mock-interaction-id",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`<Hold /> with false isOnHold calls toggleInteractionIsHolding with interactionId 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock-interaction-id",
      true,
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`<Hold /> with isOnHold calls CxEngage.interactions.voice.customerResume with the interactionId 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "interactionId": "mock-interaction-id",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`<Hold /> with isOnHold calls toggleInteractionIsHolding with interactionId 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock-interaction-id",
      true,
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;
