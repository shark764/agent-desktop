// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`agentDesktopReducer ADD_INTERACTION adding an inbound interaction adds it 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      contact: undefined,
      timeout: NaN,
      warmTransfers: Immutable.List [
      ],
      contactMode: "search",
      selectedSidePanelTab: "info",
      query: Immutable.Map {
      },
      muted: false,
      dispositionDetails: Immutable.Map {
        forceSelect: false,
        dispositions: Immutable.List [
        ],
        categories: Immutable.List [
        ],
        selected: Immutable.List [
        ],
      },
      autoAnswer: undefined,
      interactionId: "test-interaction-id",
      note: Immutable.Map {
        body: "",
        title: "",
        notesPanelHeight: 300,
      },
      status: "work-offer",
      agentRecordingEnabled: undefined,
      wrapupDetails: Immutable.Map {
        wrapupUpdateAllowed: false,
        wrapupEnabled: false,
      },
      channelType: "voice",
      activeContactForm: Immutable.Map {
        contactForm: Immutable.Map {
        },
        formIsDirty: false,
        selectedIndexes: Immutable.Map {
        },
        showErrors: Immutable.Map {
        },
        editingContacts: Immutable.List [
        ],
        formIsValid: false,
        unusedFields: Immutable.Map {
        },
        formErrors: Immutable.Map {
        },
        saveLoading: false,
      },
      direction: "inbound",
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound email interaction is ignored 1`] = `
Immutable.Map {
  interactions: Immutable.List [
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound sms interaction is ignored 1`] = `
Immutable.Map {
  interactions: Immutable.List [
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound voice interaction with new attributes when the interaction is present updates the interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      contact: undefined,
      timeout: NaN,
      warmTransfers: Immutable.List [
      ],
      contactMode: "search",
      selectedSidePanelTab: "info",
      query: Immutable.Map {
      },
      muted: false,
      dispositionDetails: Immutable.Map {
        forceSelect: false,
        dispositions: Immutable.List [
        ],
        categories: Immutable.List [
        ],
        selected: Immutable.List [
        ],
      },
      autoAnswer: undefined,
      interactionId: "test-interaction-id",
      note: Immutable.Map {
        body: "",
        title: "",
        notesPanelHeight: 300,
      },
      status: "work-offer",
      agentRecordingEnabled: undefined,
      wrapupDetails: Immutable.Map {
        wrapupUpdateAllowed: false,
        wrapupEnabled: false,
      },
      channelType: "voice",
      activeContactForm: Immutable.Map {
        contactForm: Immutable.Map {
        },
        formIsDirty: false,
        selectedIndexes: Immutable.Map {
        },
        showErrors: Immutable.Map {
        },
        editingContacts: Immutable.List [
        ],
        formIsValid: false,
        unusedFields: Immutable.Map {
        },
        formErrors: Immutable.Map {
        },
        saveLoading: false,
      },
      direction: "outbound",
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer ADD_MESSAGE Message is added 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      direction: "inbound",
      channelType: "sms",
      messageHistory: Immutable.List [
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_MESSAGE ResponseMessage is added 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      direction: "inbound",
      channelType: "sms",
      messageHistory: Immutable.List [
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is not there adds a "script-only" interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
    },
    Immutable.Map {
      interactionId: "new-interaction-id",
      status: "script-only",
      isScriptOnly: true,
      script: Immutable.Map {
        scriptItem: "something",
      },
      selectedSidePanelTab: "info",
      query: Immutable.Map {
      },
      contact: Immutable.Map {
      },
      activeContactForm: Immutable.Map {
        contactForm: Immutable.Map {
        },
        formIsDirty: false,
        selectedIndexes: Immutable.Map {
        },
        showErrors: Immutable.Map {
        },
        editingContacts: Immutable.List [
        ],
        formIsValid: false,
        unusedFields: Immutable.Map {
        },
        formErrors: Immutable.Map {
        },
        saveLoading: false,
      },
    },
  ],
  selectedInteractionId: "test-interaction-id",
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is not there no existing/selected interactions adds also selects the interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "new-interaction-id",
      status: "script-only",
      isScriptOnly: true,
      script: Immutable.Map {
        scriptItem: "something",
      },
      selectedSidePanelTab: "info",
      query: Immutable.Map {
      },
      contact: Immutable.Map {
      },
      activeContactForm: Immutable.Map {
        contactForm: Immutable.Map {
        },
        formIsDirty: false,
        selectedIndexes: Immutable.Map {
        },
        showErrors: Immutable.Map {
        },
        editingContacts: Immutable.List [
        ],
        formIsValid: false,
        unusedFields: Immutable.Map {
        },
        formErrors: Immutable.Map {
        },
        saveLoading: false,
      },
    },
  ],
  selectedInteractionId: "new-interaction-id",
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is there adds the script 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      channelType: "messaging",
      script: Immutable.Map {
        scriptItem: "something",
      },
    },
  ],
}
`;

exports[`agentDesktopReducer INITIALIZE_OUTBOUND_SMS_FOR_AGENT_DESKTOP sets the interactionId, updates the selectedInteractionId, updates the status, and adds the message 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      messageHistory: Immutable.List [
        Object {
          "from": "Agent",
          "text": "new message!",
          "timestamp": "1970-01-01T00:00:00.000Z",
          "type": "agent",
          "unread": false,
        },
      ],
      interactionId: "newInteractionId",
      status: "initialized-outbound",
    },
  ],
  selectedInteractionId: "newInteractionId",
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction is not there does nothing 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction with a script sets the status to "work-ended-pending-script" 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      script: Immutable.Map {
        scriptItem: "something",
      },
      status: "work-ended-pending-script",
      contactMode: "view",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is not the selected interaction keeps the selectedInteractionId the same 1`] = `
Immutable.Map {
  interactions: Immutable.List [
  ],
  selectedInteractionId: "other-interaction-id",
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is the selected interaction only non-voice interactions exist selects the first non-voice interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "first-interaction-id",
      channelType: "sms",
    },
    Immutable.Map {
      interactionId: "second-interaction-id",
      channelType: "email",
    },
  ],
  selectedInteractionId: "first-interaction-id",
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is the selected interaction voice interaction exists selects the voice interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "sms-interaction-id",
      channelType: "sms",
    },
    Immutable.Map {
      interactionId: "voice-interaction-id",
      channelType: "voice",
    },
  ],
  selectedInteractionId: "voice-interaction-id",
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION_HARD interaction is not there does nothing 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION_HARD interaction is the selected interaction removes the interaction and selectes the next one 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "first-interaction-id",
      channelType: "sms",
    },
    Immutable.Map {
      interactionId: "second-interaction-id",
      channelType: "email",
    },
  ],
  selectedInteractionId: "first-interaction-id",
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is not there does nothing 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      script: Immutable.Map {
        scriptItem: "something",
      },
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there removes the script 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      script: undefined,
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there the interaction has isScriptOnly removes the script, removes isScriptOnly, and selects the next interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      script: undefined,
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there the interaction has status of "work-ended-pending-script" removes the interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer SET_ACTIVE_RESOURCES if interaction exists sets the active resources 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "interaction-id",
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "external-resource-id",
          externalResource: true,
          extension: "external-resource",
          targetResource: "external-resource-id",
          status: "connected",
          name: "external-resource",
        },
        Immutable.Map {
          id: "internal-resource-id",
          targetResource: "internal-resource-id",
          status: "connected",
          name: "Agent",
        },
      ],
    },
    Immutable.Map {
      interactionId: "a-different-interaction",
    },
  ],
}
`;

exports[`agentDesktopReducer SET_ACTIVE_RESOURCES if interaction no longer exists does nothing 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "a-different-interaction",
    },
  ],
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if interaction is "isScriptOnly" deletes "isScriptOnly" 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      status: "work-accepting",
      channelType: "voice",
      script: Immutable.Map {
        id: "mock-script-id",
      },
    },
  ],
  selectedInteractionId: "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if no interaction is currently selected selects the interaction 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      status: "work-accepting",
    },
  ],
  selectedInteractionId: "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if interaction is of channelType 'voice' and action contains a response object sets onHold and recording parameters 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      status: undefined,
      channelType: "voice",
      onHold: true,
      recording: false,
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there are multiple interactions updates the correct interaction's status 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      status: "new status",
    },
    Immutable.Map {
      interactionId: "other-interaction-id",
      status: "other-status-id",
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there the interaction does not exist makes no change 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "other-interaction-id",
      status: "other-status-id",
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting an interaction's status to wrapup if the interaction has wrapupDetails updates the timeout 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      interactionId: "test-interaction-id",
      status: "wrapup",
      timeout: 30000,
      wrapupDetails: Immutable.Map {
        wrapupTime: 30,
      },
    },
  ],
  selectedInteractionId: undefined,
}
`;

exports[`agentDesktopReducer START_OUTBOUND_INTERACTION adds a new outbound interaction with a generated interactionId, channelType, customer, and contact 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      contact: Immutable.Map {
        id: "test-contact-id",
        attributes: Immutable.Map {
          name: "Josh Clowater",
          email: "jclowater@serenova.com",
        },
      },
      timeout: NaN,
      contactMode: "search",
      selectedSidePanelTab: "info",
      query: Immutable.Map {
      },
      dispositionDetails: Immutable.Map {
        forceSelect: false,
        dispositions: Immutable.List [
        ],
        categories: Immutable.List [
        ],
        selected: Immutable.List [
        ],
      },
      autoAnswer: undefined,
      messageHistory: Array [],
      interactionId: "outbound-sms-+15064701234",
      note: Immutable.Map {
        body: "",
        title: "",
        notesPanelHeight: 300,
      },
      status: "connecting-to-outbound",
      customerAvatarIndex: 0,
      wrapupDetails: Immutable.Map {
        wrapupUpdateAllowed: false,
        wrapupEnabled: false,
      },
      channelType: "sms",
      activeContactForm: Immutable.Map {
        contactForm: Immutable.Map {
        },
        formIsDirty: false,
        selectedIndexes: Immutable.Map {
        },
        showErrors: Immutable.Map {
        },
        editingContacts: Immutable.List [
        ],
        formIsValid: false,
        unusedFields: Immutable.Map {
        },
        formErrors: Immutable.Map {
        },
        saveLoading: false,
      },
      customer: "+15064701234",
      direction: "outbound",
    },
  ],
  selectedInteractionId: "outbound-sms-+15064701234",
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is not present on interactions does nothing 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-1",
        },
        Immutable.Map {
          id: "resource-id-2",
        },
      ],
    },
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-2",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is present on interactions if resource has name properties sets the name of the resource 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-1",
        },
        Immutable.Map {
          id: "resource-id-2",
          name: "Tester Testingson",
        },
      ],
    },
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-2",
          name: "Tester Testingson",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is present on interactions if resource has no name properties sets the name of the resource to be the resource's email 1`] = `
Immutable.Map {
  interactions: Immutable.List [
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-1",
        },
        Immutable.Map {
          id: "resource-id-2",
          name: "tester@testingson.com",
        },
      ],
    },
    Immutable.Map {
      warmTransfers: Immutable.List [
        Immutable.Map {
          id: "resource-id-2",
          name: "tester@testingson.com",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer returns the correct initial state 1`] = `
Immutable.Map {
  interactions: Immutable.List [
  ],
  queues: Immutable.List [
  ],
  isContactsPanelCollapsed: true,
  newInteractionPanel: Immutable.Map {
    interactionId: "creating-new-interaction",
    status: "creating-new-interaction",
    visible: false,
    selectedSidePanelTab: "info",
    contactMode: "view",
    query: Immutable.Map {
    },
    activeContactForm: Immutable.Map {
      contactForm: Immutable.Map {
      },
      formIsDirty: false,
      selectedIndexes: Immutable.Map {
      },
      showErrors: Immutable.Map {
      },
      editingContacts: Immutable.List [
      ],
      formIsValid: false,
      unusedFields: Immutable.Map {
      },
      formErrors: Immutable.Map {
      },
      saveLoading: false,
    },
    contact: Immutable.Map {
    },
  },
  extensions: Immutable.List [
  ],
  noInteractionContactPanel: Immutable.Map {
    contactMode: "search",
    query: Immutable.Map {
    },
    selectedSidePanelTab: "info",
    activeContactForm: Immutable.Map {
      contactForm: Immutable.Map {
      },
      formIsDirty: false,
      selectedIndexes: Immutable.Map {
      },
      showErrors: Immutable.Map {
      },
      editingContacts: Immutable.List [
      ],
      formIsValid: false,
      unusedFields: Immutable.Map {
      },
      formErrors: Immutable.Map {
      },
      saveLoading: false,
    },
    contact: Immutable.Map {
    },
  },
  presenceReasonLists: Immutable.List [
  ],
  activeExtension: Immutable.Map {
  },
  refreshRequired: false,
  presenceReason: Immutable.Map {
  },
}
`;
