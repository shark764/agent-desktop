// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`agentDesktopReducer ADD_INTERACTION adding an inbound interaction adds it 1`] = `
Object {
  "interactions": Array [
    Object {
      "agentRecordingEnabled": undefined,
      "autoAnswer": undefined,
      "channelType": "voice",
      "contact": undefined,
      "contactAction": "search",
      "direction": "inbound",
      "dispositionDetails": Object {
        "categories": Array [],
        "dispositions": Array [],
        "forceSelect": false,
        "selected": Array [],
      },
      "interactionId": "test-interaction-id",
      "muted": false,
      "note": Object {
        "body": "",
        "notesPanelHeight": 300,
        "title": "",
      },
      "onHold": false,
      "query": Object {},
      "recording": false,
      "sidePanelTabIndex": 0,
      "status": "work-offer",
      "timeout": NaN,
      "warmTransfers": Array [],
      "wrapupDetails": Object {
        "wrapupEnabled": false,
        "wrapupUpdateAllowed": false,
      },
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound sms interaction is ignored 1`] = `
Object {
  "interactions": Array [],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound voice interaction with new attributes when the interaction is present updates the interaction 1`] = `
Object {
  "interactions": Array [
    Object {
      "agentRecordingEnabled": undefined,
      "autoAnswer": undefined,
      "channelType": "voice",
      "contact": undefined,
      "contactAction": "search",
      "direction": "outbound",
      "dispositionDetails": Object {
        "categories": Array [],
        "dispositions": Array [],
        "forceSelect": false,
        "selected": Array [],
      },
      "interactionId": "test-interaction-id",
      "muted": false,
      "note": Object {
        "body": "",
        "notesPanelHeight": 300,
        "title": "",
      },
      "onHold": false,
      "query": Object {},
      "recording": true,
      "sidePanelTabIndex": 0,
      "status": "work-offer",
      "timeout": NaN,
      "warmTransfers": Array [],
      "wrapupDetails": Object {
        "wrapupEnabled": false,
        "wrapupUpdateAllowed": false,
      },
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer ADD_MESSAGE Message is added 1`] = `
Object {
  "interactions": Array [
    Object {
      "channelType": "sms",
      "direction": "inbound",
      "interactionId": "test-interaction-id",
      "messageHistory": Array [],
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_MESSAGE ResponseMessage is added 1`] = `
Object {
  "interactions": Array [
    Object {
      "channelType": "sms",
      "direction": "inbound",
      "interactionId": "test-interaction-id",
      "messageHistory": Array [],
    },
  ],
}
`;

exports[`agentDesktopReducer INITIALIZE_OUTBOUND_SMS sets the interactionId, updates the selectedInteractionId, updates the status, and adds the message 1`] = `
Object {
  "interactions": Array [
    Object {
      "interactionId": "newInteractionId",
      "messageHistory": Array [
        Object {
          "from": "Agent",
          "text": "new message!",
          "timestamp": "1970-01-01T00:00:00.000Z",
          "type": "agent",
          "unread": false,
        },
      ],
      "status": "initialized-outbound",
    },
  ],
  "selectedInteractionId": "newInteractionId",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if no interaction is currently selected selects the interaction 1`] = `
Object {
  "interactions": Array [
    Object {
      "interactionId": "test-interaction-id",
      "status": "work-accepting",
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if response includes conference details if the interaction has is a voice interaction with existing different conference details updates the conference participants and details 1`] = `
Object {
  "interactions": Array [
    Object {
      "channelType": "voice",
      "interactionId": "test-interaction-id",
      "onHold": true,
      "recording": true,
      "status": "work-accepting",
      "warmTransfers": Array [
        Object {
          "muted": true,
          "onHold": true,
          "targetResource": "resource-id-2",
        },
      ],
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there are multiple interactions updates the correct interaction's status 1`] = `
Object {
  "interactions": Array [
    Object {
      "interactionId": "test-interaction-id",
      "status": "new status",
    },
    Object {
      "interactionId": "other-interaction-id",
      "status": "other-status-id",
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there the interaction does not exist makes no change 1`] = `
Object {
  "interactions": Array [
    Object {
      "interactionId": "other-interaction-id",
      "status": "other-status-id",
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting an interaction's status to wrapup if the interaction has wrapupDetails updates the timeout 1`] = `
Object {
  "interactions": Array [
    Object {
      "interactionId": "test-interaction-id",
      "status": "wrapup",
      "timeout": 30000,
      "wrapupDetails": Object {
        "wrapupTime": 30,
      },
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer START_OUTBOUND_INTERACTION adds a new outbound interaction with a generated interactionId, channelType, customer, and contact 1`] = `
Object {
  "interactions": Array [
    Object {
      "autoAnswer": undefined,
      "channelType": "sms",
      "contact": Object {
        "attributes": Object {
          "email": "jclowater@serenova.com",
          "name": "Josh Clowater",
        },
        "id": "test-contact-id",
      },
      "contactAction": "view",
      "customer": "+15064701234",
      "customerAvatarIndex": 0,
      "direction": "outbound",
      "dispositionDetails": Object {
        "categories": Array [],
        "dispositions": Array [],
        "forceSelect": false,
        "selected": Array [],
      },
      "interactionId": "outbound-sms-+15064701234",
      "messageHistory": Array [],
      "note": Object {
        "body": "",
        "notesPanelHeight": 300,
        "title": "",
      },
      "query": Object {},
      "sidePanelTabIndex": 0,
      "status": "connecting-to-outbound",
      "timeout": NaN,
      "wrapupDetails": Object {
        "wrapupEnabled": false,
        "wrapupUpdateAllowed": false,
      },
    },
  ],
  "selectedInteractionId": "outbound-sms-+15064701234",
}
`;

exports[`agentDesktopReducer returns the correct initial state 1`] = `
Object {
  "activeExtension": Object {},
  "extensions": Array [],
  "interactions": Array [],
  "isContactsPanelCollapsed": true,
  "newInteractionPanel": Object {
    "contactAction": "view",
    "interactionId": "creating-new-interaction",
    "sidePanelTabIndex": 0,
    "status": "creating-new-interaction",
    "visible": false,
  },
  "noInteractionContactPanel": Object {
    "contactAction": "search",
    "query": Object {},
    "sidePanelTabIndex": 0,
  },
  "presenceReason": Object {},
  "presenceReasonLists": Array [],
  "queues": Array [],
  "refreshRequired": false,
}
`;
