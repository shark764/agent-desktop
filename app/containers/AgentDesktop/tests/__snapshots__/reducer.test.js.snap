// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`agentDesktopReducer ADD_INTERACTION adding an inbound interaction adds it 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "togglingRecording": false,
      "isMuting": false,
      "timeout": NaN,
      "warmTransfers": Immutable.List [],
      "contactMode": "search",
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "notifications": Immutable.List [],
      "customFields": Immutable.List [],
      "customerConnected": true,
      "muted": false,
      "dispositionDetails": Immutable.Map {
        "forceSelect": false,
        "dispositions": Immutable.List [],
        "categories": Immutable.List [],
        "selected": Immutable.List [],
      },
      "autoAnswer": undefined,
      "interactionId": "test-interaction-id",
      "customFieldsCollapsed": true,
      "isEnding": false,
      "note": Immutable.Map {
        "body": "",
        "title": "",
        "notesPanelHeight": 180,
      },
      "status": "work-offer",
      "isSidePanelCollapsed": true,
      "agentRecordingEnabled": undefined,
      "isHolding": false,
      "wrapupDetails": Immutable.Map {
        "wrapupUpdateAllowed": false,
        "wrapupEnabled": false,
      },
      "channelType": "voice",
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
      "direction": "inbound",
    },
  ],
  "selectedInteractionId": undefined,
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an inbound interaction when outbound interactions exist adds it. doesn't affect outbound interaction. 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "other-interaction-id",
      "channelType": "email",
      "direction": "agent-initiated",
      "contact": Immutable.Map {
        "id": "test-contact-id",
      },
      "contactMode": "view",
      "isSidePanelCollapsed": false,
    },
    Immutable.Map {
      "isMuting": false,
      "timeout": NaN,
      "warmTransfers": Immutable.List [],
      "contactMode": "search",
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "notifications": Immutable.List [],
      "customFields": Immutable.List [],
      "dispositionDetails": Immutable.Map {
        "forceSelect": false,
        "dispositions": Immutable.List [],
        "categories": Immutable.List [],
        "selected": Immutable.List [],
      },
      "autoAnswer": undefined,
      "interactionId": "test-interaction-id",
      "customFieldsCollapsed": true,
      "isEnding": false,
      "note": Immutable.Map {
        "body": "",
        "title": "",
        "notesPanelHeight": 180,
      },
      "status": "work-offer",
      "isSidePanelCollapsed": true,
      "isHolding": false,
      "wrapupDetails": Immutable.Map {
        "wrapupUpdateAllowed": false,
        "wrapupEnabled": false,
      },
      "channelType": "email",
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
      "customer": undefined,
      "direction": "inbound",
    },
  ],
  "selectedInteractionId": undefined,
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound email interaction is ignored 1`] = `
Immutable.Map {
  "interactions": Immutable.List [],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound sms interaction is ignored 1`] = `
Immutable.Map {
  "interactions": Immutable.List [],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION adding an outbound voice interaction with new attributes when the interaction is present updates the interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": "test-contact-id",
      },
      "togglingRecording": false,
      "isMuting": false,
      "timeout": NaN,
      "warmTransfers": Immutable.List [],
      "contactMode": "view",
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "notifications": Immutable.List [],
      "customFields": undefined,
      "customerConnected": false,
      "muted": false,
      "dispositionDetails": Immutable.Map {
        "forceSelect": false,
        "dispositions": Immutable.List [],
        "categories": Immutable.List [],
        "selected": Immutable.List [],
      },
      "autoAnswer": undefined,
      "interactionId": "test-interaction-id",
      "customFieldsCollapsed": true,
      "isEnding": false,
      "note": Immutable.Map {
        "body": "",
        "title": "",
        "notesPanelHeight": 180,
      },
      "status": "work-offer",
      "isSidePanelCollapsed": false,
      "agentRecordingEnabled": undefined,
      "isHolding": false,
      "wrapupDetails": Immutable.Map {
        "wrapupUpdateAllowed": false,
        "wrapupEnabled": false,
      },
      "channelType": "voice",
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
      "direction": "agent-initiated",
    },
  ],
  "selectedInteractionId": undefined,
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer ADD_INTERACTION_NOTIFICATION removes the correct notification from the specified interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "notifications": Immutable.List [],
    },
    Immutable.Map {
      "interactionId": 2,
      "notifications": Immutable.List [
        Immutable.Map {
          "messageKey": "b",
          "isDimissable": false,
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_MESSAGE Message is added 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "direction": "inbound",
      "channelType": "sms",
      "messageHistory": Immutable.List [
        Immutable.Record {
          "id": "no-id",
          "type": "agent",
          "from": "Agent",
          "text": "test message",
          "timestamp": "1970-01-01T00:00:00.000Z",
        },
      ],
      "isCopied": false,
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_MESSAGE ResponseMessage is added 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "direction": "inbound",
      "channelType": "sms",
      "messageHistory": Immutable.List [
        Immutable.Record {
          "id": "no-id",
          "type": "customer",
          "from": "Josh Clowater",
          "text": "test messasge",
          "timestamp": "1970-01-01T00:00:00.000Z",
        },
      ],
      "isCopied": false,
    },
  ],
}
`;

exports[`agentDesktopReducer ADD_SCRIPT if interaction is in work-initiated adds "isScriptOnly" 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "work-initiated",
      "isScriptOnly": true,
      "script": Immutable.Record {
        "id": "actual-script-id",
        "name": "no-name",
        "elements": Immutable.List [],
        "values": Immutable.Map {},
        "autoScriptDismiss": false,
        "scriptReporting": true,
        "scrollTop": 0,
      },
      "channelType": "email",
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is not there adds a "script-only" interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
    },
    Immutable.Map {
      "interactionId": "new-interaction-id",
      "status": "script-only",
      "isScriptOnly": true,
      "script": Immutable.Record {
        "id": "actual-script-id",
        "name": "no-name",
        "elements": Immutable.List [],
        "values": Immutable.Map {},
        "autoScriptDismiss": false,
        "scriptReporting": true,
        "scrollTop": 0,
      },
      "isSidePanelCollapsed": true,
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
    },
  ],
  "selectedInteractionId": "test-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is not there no existing/selected interactions adds also selects the interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "new-interaction-id",
      "status": "script-only",
      "isScriptOnly": true,
      "script": Immutable.Record {
        "id": "actual-script-id",
        "name": "no-name",
        "elements": Immutable.List [],
        "values": Immutable.Map {},
        "autoScriptDismiss": false,
        "scriptReporting": true,
        "scrollTop": 0,
      },
      "isSidePanelCollapsed": true,
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
    },
  ],
  "selectedInteractionId": "new-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer ADD_SCRIPT interaction is there adds the script and replaces the id 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "channelType": "messaging",
      "script": Immutable.Record {
        "id": "actual-script-id",
        "name": "no-name",
        "elements": Immutable.List [],
        "values": Immutable.Map {},
        "autoScriptDismiss": false,
        "scriptReporting": true,
        "scrollTop": 0,
      },
      "isScriptOnly": false,
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer CLOSE_CURRENT_CRM_ITEM_HISTORY_PANEL resets currentCrmItemHistoryPanel and selects the next interactionId 1`] = `
Immutable.Map {
  "currentCrmItemHistoryPanel": Immutable.Map {
    "interactionId": "current-crm-item-history",
    "status": "current-crm-item-history",
    "isSidePanelCollapsed": true,
  },
  "selectedInteractionId": undefined,
  "interactions": Immutable.List [],
}
`;

exports[`agentDesktopReducer CLOSE_NEW_INTERACTION_PANEL resets newInteractionPanel and selects the next interactionId 1`] = `
Immutable.Map {
  "newInteractionPanel": Immutable.Map {
    "contactMode": "view",
    "selectedSidePanelTab": "info",
    "query": Immutable.Map {},
    "interactionId": "creating-new-interaction",
    "visible": false,
    "status": "creating-new-interaction",
    "isSidePanelCollapsed": false,
    "newInteractionFormInput": "",
    "activeContactForm": Immutable.Map {
      "contactForm": Immutable.Map {},
      "formIsDirty": false,
      "selectedIndexes": Immutable.Map {},
      "showErrors": Immutable.Map {},
      "editingContacts": Immutable.List [],
      "formIsValid": false,
      "unusedFields": Immutable.Map {},
      "formErrors": Immutable.Map {},
      "saveLoading": false,
    },
  },
  "selectedInteractionId": undefined,
  "interactions": Immutable.List [],
}
`;

exports[`agentDesktopReducer DISMISS_CONTACT_WAS_ASSIGNED_NOTIFICATION sets contactAssignedNotification to false 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contactAssignedNotification": false,
    },
  ],
}
`;

exports[`agentDesktopReducer DISMISS_CONTACT_WAS_UNASSIGNED_NOTIFICATION removes contactAssignedNotification 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
    },
  ],
}
`;

exports[`agentDesktopReducer INITIALIZE_OUTBOUND_SMS_FOR_AGENT_DESKTOP sets the interactionId, updates the selectedInteractionId, updates the status, and adds the message 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "messageHistory": Immutable.List [
        Immutable.Record {
          "id": "no-id",
          "type": "agent",
          "from": "Agent",
          "text": "new message!",
          "timestamp": "1970-01-01T00:00:00.000Z",
        },
      ],
      "interactionId": "newInteractionId",
      "status": "initialized-outbound",
    },
  ],
  "selectedInteractionId": "newInteractionId",
}
`;

exports[`agentDesktopReducer OPEN_NEW_INTERACTION_PANEL Opens the new interaction panel allowing the default param to set value to null 1`] = `
Immutable.Map {
  "newInteractionPanel": Immutable.Map {
    "newInteractionFormInput": "",
    "visible": true,
    "isSidePanelCollapsed": true,
  },
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer OPEN_NEW_INTERACTION_PANEL Opens the new interaction panel with text from a click to dial 1`] = `
Immutable.Map {
  "newInteractionPanel": Immutable.Map {
    "newInteractionFormInput": "new input yo",
    "visible": true,
    "isSidePanelCollapsed": true,
  },
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer OUTBOUND_CUSTOMER_CONNECTED Customer picks up the outbound interaction voice customerConnected is set to true 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "customerConnected": true,
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if a contact is deleted when there are no interactions present nothing happens 1`] = `
Immutable.Map {
  "interactions": Immutable.List [],
  "newInteractionPanel": Immutable.Map {},
  "noInteractionContactPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if an interaction is in progress and no interaction panel is open will delete as normal 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id-",
    },
  ],
  "noInteractionContactPanel": Immutable.Map {},
  "newInteractionPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if an interaction is in progress and the new interaction panel is open will delete as normal 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id-1",
    },
  ],
  "newInteractionPanel": Immutable.Map {},
  "noInteractionContactPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if an interaction is in progress, and no contact is assigned to that interaction, when one of the contacts is removed will remove the targeted contact as normal 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
    },
  ],
  "newInteractionPanel": Immutable.Map {},
  "noInteractionContactPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if one or more interactions are in progress, and one of the contacts is removed if multiple interactions are in progress, and the assigned contact is removed will remove the targeted contact as normal 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id-1",
    },
    Immutable.Map {
      "interactionId": "test-interaction-id-2",
      "contact": Immutable.Map {
        "id": "test-contact-id-2",
      },
    },
  ],
  "newInteractionPanel": Immutable.Map {},
  "noInteractionContactPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_CONTACT if one or more interactions are in progress, and one of the contacts is removed if one interaction is in progress, and the assigned contact is removed will remove the targeted contact as normal 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id-1",
    },
  ],
  "newInteractionPanel": Immutable.Map {},
  "noInteractionContactPanel": Immutable.Map {},
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction is not there does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction with a script sets the status to "work-ended-pending-script" 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "script": Immutable.Map {
        "scriptItem": "something",
      },
      "status": "work-ended-pending-script",
      "contactMode": "view",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is not the selected interaction keeps the selectedInteractionId the same 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "other-interaction-id",
    },
  ],
  "selectedInteractionId": "other-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is the selected interaction only non-voice interactions exist selects the first non-voice interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "first-interaction-id",
      "channelType": "sms",
    },
    Immutable.Map {
      "interactionId": "second-interaction-id",
      "channelType": "email",
    },
  ],
  "selectedInteractionId": "first-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script interaction is the selected interaction voice interaction exists selects the voice interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "sms-interaction-id",
      "channelType": "sms",
    },
    Immutable.Map {
      "interactionId": "voice-interaction-id",
      "channelType": "voice",
    },
  ],
  "selectedInteractionId": "voice-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION interaction without a script only pending interaction exist selects nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "first-interaction-id",
      "channelType": "sms",
    },
  ],
  "selectedInteractionId": undefined,
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION_HARD interaction is not there does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION_HARD interaction is the selected interaction removes the interaction and selectes the next one 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "first-interaction-id",
      "channelType": "sms",
    },
    Immutable.Map {
      "interactionId": "second-interaction-id",
      "channelType": "email",
    },
  ],
  "selectedInteractionId": "first-interaction-id",
  "isInteractionsBarCollapsed": false,
}
`;

exports[`agentDesktopReducer REMOVE_INTERACTION_NOTIFICATION removes the correct notification from the specified interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "notifications": Immutable.List [
        Immutable.Map {
          "messageKey": "a",
        },
        Immutable.Map {
          "messageKey": "b",
        },
      ],
    },
    Immutable.Map {
      "interactionId": 2,
      "notifications": Immutable.List [
        Immutable.Map {
          "messageKey": "a",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is not there does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "script": Immutable.Map {
        "scriptItem": "something",
      },
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there removes the script 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "script": undefined,
    },
  ],
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there the interaction has isScriptOnly removes the script, removes isScriptOnly, and selects the next interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "script": undefined,
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer REMOVE_SCRIPT interaction is there the interaction has status of "work-ended-pending-script" removes the interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [],
  "selectedInteractionId": undefined,
  "isInteractionsBarCollapsed": true,
}
`;

exports[`agentDesktopReducer SET_ACTIVE_RESOURCES if interaction exists sets the active resources 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "external-resource-id",
          "externalResource": true,
          "extension": "external-resource",
          "targetResource": "external-resource-id",
          "status": "connected",
          "name": "external-resource",
          "addedTimestamp": 0,
        },
        Immutable.Map {
          "id": "internal-resource-id",
          "targetResource": "internal-resource-id",
          "status": "connected",
          "name": "Agent",
          "addedTimestamp": 0,
        },
      ],
    },
    Immutable.Map {
      "interactionId": "a-different-interaction",
    },
  ],
}
`;

exports[`agentDesktopReducer SET_ACTIVE_RESOURCES if interaction no longer exists does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "a-different-interaction",
    },
  ],
}
`;

exports[`agentDesktopReducer SET_ASSIGNED_CONTACT no crmModule (Desktop) adds the contact and sets contactMode to view 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contact": Immutable.Map {
        "id": "mockContactId",
        "attributes": Immutable.Map {
          "name": "mockContactName",
        },
      },
      "contactMode": "view",
    },
  ],
  "crmModule": "none",
}
`;

exports[`agentDesktopReducer SET_ASSIGNED_CONTACT salesforce-classic crmModule adds the contact and sets contactAssignedNotification 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contact": Immutable.Map {
        "id": "mockContactId",
        "attributes": Immutable.Map {
          "name": "mockContactName",
        },
      },
      "contactAssignedNotification": "contactWasAssigned",
    },
  ],
  "crmModule": "salesforce-classic",
}
`;

exports[`agentDesktopReducer SET_ASSIGNED_CONTACT salesforce-lightning crmModule adds the contact and sets contactAssignedNotification 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contact": Immutable.Map {
        "id": "mockContactId",
        "attributes": Immutable.Map {
          "name": "mockContactName",
        },
      },
      "contactAssignedNotification": "contactWasAssigned",
    },
  ],
  "crmModule": "salesforce-lightning",
}
`;

exports[`agentDesktopReducer SET_ASSIGNED_CONTACT zendesk crmModule adds the contact and sets contactAssignedNotification 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contact": Immutable.Map {
        "id": "mockContactId",
        "attributes": Immutable.Map {
          "name": "mockContactName",
        },
      },
      "contactAssignedNotification": "contactWasAssigned",
      "selectedSidePanelTab": "history",
    },
  ],
  "crmModule": "zendesk",
}
`;

exports[`agentDesktopReducer SET_CRM_ACTIVE_TAB sets the zendeskActiveTab correctly 1`] = `
Immutable.Map {
  "crmActiveTab": Immutable.Map {
    "interactionId": "current-crm-item-history",
    "contact": Immutable.Map {
      "type": "user",
      "id": 123,
      "attributes": Immutable.Map {
        "name": "test-name",
      },
    },
  },
}
`;

exports[`agentDesktopReducer SET_CRM_ACTIVE_TAB when the id and type match the already stored value only updates the name 1`] = `
Immutable.Map {
  "zendeskActiveTab": Immutable.Map {
    "id": 123,
    "type": "user",
    "attributes": Immutable.Map {
      "name": "previous-name",
    },
    "interactionHistory": "history stuff here",
  },
  "crmActiveTab": Immutable.Map {
    "interactionId": "current-crm-item-history",
    "contact": Immutable.Map {
      "type": "user",
      "id": 123,
      "attributes": Immutable.Map {
        "name": "test-name",
      },
    },
  },
}
`;

exports[`agentDesktopReducer SET_CUSTOM_FIELDS When customFields has already one custom field or it is an empty array it adds the ones that come from the SDK at the begginig of the list 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "customFields": Immutable.List [
        "value 2",
        "value 3",
        "value 1",
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_CUSTOM_FIELDS When customFields it is not set customFields is set to the values that come from the SDK 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "customFields": Array [
        "value 2",
        "value 3",
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_DISPOSITION_DETAILS shows the dispositions list ordered as it was ordered on the configuration 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": 1,
      "dispositionDetails": Immutable.Map {
        "forceSelect": "Some random action",
        "dispositions": Immutable.List [
          Immutable.Map {
            "name": "a",
            "sortOrder": 1,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "b",
            "sortOrder": 2,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "Test1",
            "dispositions": Immutable.List [
              Immutable.Map {
                "name": "c",
                "sortOrder": 3,
                "hierarchy": Immutable.List [
                  "Test1",
                ],
              },
              Immutable.Map {
                "name": "d",
                "sortOrder": 4,
                "hierarchy": Immutable.List [
                  "Test1",
                ],
              },
            ],
            "type": "category",
          },
          Immutable.Map {
            "name": "e",
            "sortOrder": 5,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "f",
            "sortOrder": 6,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "g",
            "sortOrder": 7,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "h",
            "sortOrder": 8,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "i",
            "sortOrder": 9,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "j",
            "sortOrder": 10,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "Test2",
            "dispositions": Immutable.List [
              Immutable.Map {
                "name": "k",
                "sortOrder": 11,
                "hierarchy": Immutable.List [
                  "Test2",
                ],
              },
              Immutable.Map {
                "name": "l",
                "sortOrder": 12,
                "hierarchy": Immutable.List [
                  "Test2",
                ],
              },
            ],
            "type": "category",
          },
          Immutable.Map {
            "name": "Test3",
            "dispositions": Immutable.List [
              Immutable.Map {
                "name": "m",
                "sortOrder": 13,
                "hierarchy": Immutable.List [
                  "Test3",
                ],
              },
              Immutable.Map {
                "name": "n",
                "sortOrder": 14,
                "hierarchy": Immutable.List [
                  "Test3",
                ],
              },
            ],
            "type": "category",
          },
        ],
        "selected": Immutable.List [],
      },
    },
    Immutable.Map {
      "interactionId": 2,
    },
  ],
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if interaction is "isScriptOnly" deletes "isScriptOnly" 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "work-accepting",
      "timeAccepted": 0,
      "script": Immutable.Map {
        "id": "mock-script-id",
      },
      "channelType": "voice",
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if interaction is channel type voice adds a timestamp for timeAccepted 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "work-accepting",
      "channelType": "voice",
      "timeAccepted": 0,
      "onHold": false,
      "recording": false,
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if accepting an interaction if no interaction is currently selected selects the interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "work-accepting",
      "timeAccepted": 0,
    },
  ],
  "selectedInteractionId": "test-interaction-id",
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if interaction is of channelType 'voice' and action contains a response object sets onHold and recording parameters 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": undefined,
      "channelType": "voice",
      "onHold": true,
      "recording": false,
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there are multiple interactions updates the correct interaction's status 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "new status",
    },
    Immutable.Map {
      "interactionId": "other-interaction-id",
      "status": "other-status-id",
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting a new status if there the interaction does not exist makes no change 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "other-interaction-id",
      "status": "other-status-id",
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_INTERACTION_STATUS if setting an interaction's status to wrapup if the interaction has wrapupDetails updates the timeout and sets wrapupStarted 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "test-interaction-id",
      "status": "wrapup",
      "timeout": 30000,
      "wrapupDetails": Immutable.Map {
        "wrapupTime": 30,
      },
      "wrapupStarted": 0,
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer SET_MESSAGE_HISTORY adds the message to the history 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "messageHistory": Immutable.List [
        Immutable.Record {
          "id": "message-id",
          "type": "agent",
          "from": "Agent Name",
          "text": "new message",
          "timestamp": "1970-01-01T00:00:00.000Z",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_MESSAGE_HISTORY when a message already exists with the same id as the one being added does not add it 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "messageHistory": Immutable.List [
        Immutable.Map {
          "to": "interaction-id",
          "id": "message-id",
          "type": "agent",
          "from": "Agent Name",
          "text": "previous message",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_MESSAGE_HISTORY when a message exists with an id of "no-id" the message with id "no-id" is removed 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "messageHistory": Immutable.List [
        Immutable.Record {
          "id": "message-id",
          "type": "agent",
          "from": "Agent Name",
          "text": "new message",
          "timestamp": "1970-01-01T00:00:00.000Z",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_MESSAGE_HISTORY when there is no matching interaction id console.warns and does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "messageHistory": Immutable.List [],
    },
  ],
}
`;

exports[`agentDesktopReducer SET_NEW_INTERACTION_PANEL_FORM_INPUT sets the input in newInteractionPanel 1`] = `
Immutable.Map {
  "newInteractionPanel": Immutable.Map {
    "newInteractionFormInput": "new input",
  },
}
`;

exports[`agentDesktopReducer SET_QUEUES_TIME updates the current queue time to reflect the new average wait time 1`] = `
Immutable.Map {
  "queues": Immutable.List [
    Immutable.Map {
      "id": "test-queue-uuid",
      "queueTime": 32,
    },
  ],
}
`;

exports[`agentDesktopReducer SET_USER_CONFIG shows the presence reasons list ordered as it was ordered on the configuration 1`] = `
Immutable.Map {
  "userConfig": Immutable.Map {
    "reasonLists": Immutable.List [
      Immutable.Map {
        "active": true,
        "reasons": Immutable.List [
          Immutable.Map {
            "name": "f",
            "sortOrder": 6,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "i",
            "sortOrder": 9,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "c",
            "sortOrder": 3,
            "hierarchy": Immutable.List [
              "Test1",
            ],
          },
          Immutable.Map {
            "name": "a",
            "sortOrder": 1,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "g",
            "sortOrder": 7,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "k",
            "sortOrder": 11,
            "hierarchy": Immutable.List [
              "Test2",
            ],
          },
          Immutable.Map {
            "name": "n",
            "sortOrder": 14,
            "hierarchy": Immutable.List [
              "Test3",
            ],
          },
          Immutable.Map {
            "name": "b",
            "sortOrder": 2,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "e",
            "sortOrder": 5,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "d",
            "sortOrder": 4,
            "hierarchy": Immutable.List [
              "Test1",
            ],
          },
          Immutable.Map {
            "name": "l",
            "sortOrder": 12,
            "hierarchy": Immutable.List [
              "Test2",
            ],
          },
          Immutable.Map {
            "name": "h",
            "sortOrder": 8,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "m",
            "sortOrder": 13,
            "hierarchy": Immutable.List [
              "Test3",
            ],
          },
          Immutable.Map {
            "name": "j",
            "sortOrder": 10,
            "hierarchy": Immutable.List [],
          },
        ],
      },
      Immutable.Map {
        "active": false,
        "reasons": Immutable.List [
          Immutable.Map {
            "name": "doesn't matter",
            "sortOrder": 1,
            "hierarchy": Immutable.List [],
          },
          Immutable.Map {
            "name": "I don't care",
            "sortOrder": 2,
            "hierarchy": Immutable.List [],
          },
        ],
      },
    ],
  },
  "presenceReasonLists": Immutable.List [
    Immutable.Map {
      "active": true,
      "reasons": Immutable.List [
        Immutable.Map {
          "name": "a",
          "sortOrder": 1,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "b",
          "sortOrder": 2,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "Test1",
          "reasons": Immutable.List [
            Immutable.Map {
              "name": "c",
              "sortOrder": 3,
              "hierarchy": Immutable.List [
                "Test1",
              ],
            },
            Immutable.Map {
              "name": "d",
              "sortOrder": 4,
              "hierarchy": Immutable.List [
                "Test1",
              ],
            },
          ],
          "type": "category",
        },
        Immutable.Map {
          "name": "e",
          "sortOrder": 5,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "f",
          "sortOrder": 6,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "g",
          "sortOrder": 7,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "h",
          "sortOrder": 8,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "i",
          "sortOrder": 9,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "j",
          "sortOrder": 10,
          "hierarchy": Immutable.List [],
        },
        Immutable.Map {
          "name": "Test2",
          "reasons": Immutable.List [
            Immutable.Map {
              "name": "k",
              "sortOrder": 11,
              "hierarchy": Immutable.List [
                "Test2",
              ],
            },
            Immutable.Map {
              "name": "l",
              "sortOrder": 12,
              "hierarchy": Immutable.List [
                "Test2",
              ],
            },
          ],
          "type": "category",
        },
        Immutable.Map {
          "name": "Test3",
          "reasons": Immutable.List [
            Immutable.Map {
              "name": "m",
              "sortOrder": 13,
              "hierarchy": Immutable.List [
                "Test3",
              ],
            },
            Immutable.Map {
              "name": "n",
              "sortOrder": 14,
              "hierarchy": Immutable.List [
                "Test3",
              ],
            },
          ],
          "type": "category",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer START_OUTBOUND_INTERACTION sms adds a new outbound interaction with a generated interactionId, channelType, customer, and contact 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": "test-contact-id",
        "attributes": Immutable.Map {
          "name": "Josh Clowater",
          "email": "jclowater@serenova.com",
        },
      },
      "isMuting": false,
      "timeout": NaN,
      "warmTransfers": Immutable.List [],
      "contactMode": "view",
      "selectedSidePanelTab": "info",
      "query": Immutable.Map {},
      "notifications": Immutable.List [],
      "customFields": Immutable.List [],
      "dispositionDetails": Immutable.Map {
        "forceSelect": false,
        "dispositions": Immutable.List [],
        "categories": Immutable.List [],
        "selected": Immutable.List [],
      },
      "autoAnswer": undefined,
      "messageHistory": Immutable.List [],
      "interactionId": "agent-initiated-sms-+15064701234",
      "customFieldsCollapsed": true,
      "currentMessage": "",
      "isCopied": false,
      "isEnding": false,
      "note": Immutable.Map {
        "body": "",
        "title": "",
        "notesPanelHeight": 180,
      },
      "status": "connecting-to-outbound",
      "isSidePanelCollapsed": true,
      "isHolding": false,
      "customerAvatarIndex": 0,
      "wrapupDetails": Immutable.Map {
        "wrapupUpdateAllowed": false,
        "wrapupEnabled": false,
      },
      "channelType": "sms",
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
      "customer": "+15064701234",
      "direction": "agent-initiated",
    },
  ],
  "selectedInteractionId": "agent-initiated-sms-+15064701234",
}
`;

exports[`agentDesktopReducer START_OUTBOUND_INTERACTION voice adds a new outbound interaction with a generated interactionId, channelType, customer, hideNewInteractionPanelOnWorkAccepted, and initiatedByCurrentAgent 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": "test-contact-id",
        "attributes": Immutable.Map {
          "name": "Josh Clowater",
          "email": "jclowater@serenova.com",
        },
      },
      "togglingRecording": false,
      "isMuting": false,
      "timeout": NaN,
      "warmTransfers": Immutable.List [],
      "contactMode": "view",
      "selectedSidePanelTab": "info",
      "hideNewInteractionPanelOnWorkAccepted": true,
      "query": Immutable.Map {},
      "notifications": Immutable.List [],
      "customFields": Immutable.List [],
      "customerConnected": false,
      "muted": false,
      "dispositionDetails": Immutable.Map {
        "forceSelect": false,
        "dispositions": Immutable.List [],
        "categories": Immutable.List [],
        "selected": Immutable.List [],
      },
      "autoAnswer": undefined,
      "interactionId": "agent-initiated-voice-+15064701234",
      "customFieldsCollapsed": true,
      "initiatedByCurrentAgent": true,
      "isEnding": false,
      "note": Immutable.Map {
        "body": "",
        "title": "",
        "notesPanelHeight": 180,
      },
      "status": "connecting-to-outbound",
      "isSidePanelCollapsed": true,
      "agentRecordingEnabled": undefined,
      "isHolding": false,
      "wrapupDetails": Immutable.Map {
        "wrapupUpdateAllowed": false,
        "wrapupEnabled": false,
      },
      "channelType": "voice",
      "activeContactForm": Immutable.Map {
        "contactForm": Immutable.Map {},
        "formIsDirty": false,
        "selectedIndexes": Immutable.Map {},
        "showErrors": Immutable.Map {},
        "editingContacts": Immutable.List [],
        "formIsValid": false,
        "unusedFields": Immutable.Map {},
        "formErrors": Immutable.Map {},
        "saveLoading": false,
      },
      "direction": "agent-initiated",
    },
  ],
  "selectedInteractionId": undefined,
}
`;

exports[`agentDesktopReducer TOGGLE_CUSTOM_FIELDS should toggle customFieldsCollapsed on the appropriate interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "customFieldsCollapsed": false,
    },
    Immutable.Map {
      "interactionId": "mockInteraction2",
      "customFieldsCollapsed": true,
    },
  ],
}
`;

exports[`agentDesktopReducer TOGGLE_TRANSCRIPT_COPIED Toggles interaction's isCopied attribute from false to true 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "1",
      "isCopied": true,
    },
  ],
}
`;

exports[`agentDesktopReducer TOGGLE_TRANSCRIPT_COPIED Toggles interaction's isCopied attribute from true to false 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "1",
      "isCopied": false,
    },
  ],
}
`;

exports[`agentDesktopReducer UNASSIGN_CONTACT removes contact and sets contactAssignedNotification 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "mockInteraction1",
      "contactAssignedNotification": "contactWasUnassigned",
      "selectedSidePanelTab": "script",
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_CALL_CONTROLS updates the call controls on the specified interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "1",
    },
    Immutable.Map {
      "interactionId": "2",
      "callControls": Immutable.Map {
        "callControlsKey": false,
      },
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_CONTACT there is the same contact id, with different type in interactions updates the contact in interactions and zendeskActiveTab with the matching 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": 123,
        "type": "user",
        "name": "new name",
      },
    },
    Immutable.Map {
      "contact": Immutable.Map {
        "id": 123,
        "type": "ticket",
      },
    },
  ],
  "zendeskActiveTab": Immutable.Map {
    "contact": Immutable.Map {
      "id": 123,
      "type": "user",
    },
  },
}
`;

exports[`agentDesktopReducer UPDATE_CONTACT there is the same contact in all interactions adds the new contact attributes to the contacts 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": "test-contact-id",
        "name": "new name",
      },
    },
  ],
  "newInteractionPanel": Immutable.Map {
    "contact": Immutable.Map {
      "id": "test-contact-id",
      "name": "new name",
    },
  },
  "noInteractionContactPanel": Immutable.Map {
    "contact": Immutable.Map {
      "id": "test-contact-id",
      "name": "new name",
    },
  },
}
`;

exports[`agentDesktopReducer UPDATE_CONTACT there is the same contact in all interactions the contact id doesn't match does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "contact": Immutable.Map {
        "id": "test-contact-id",
      },
    },
  ],
  "newInteractionPanel": Immutable.Map {
    "contact": Immutable.Map {
      "id": "test-contact-id",
    },
  },
  "noInteractionContactPanel": Immutable.Map {
    "contact": Immutable.Map {
      "id": "test-contact-id",
    },
  },
}
`;

exports[`agentDesktopReducer UPDATE_MESSAGE_HISTORY_AGENT_NAME only updates the name of the agent with matching id in the interaction 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "interaction-id",
      "messageHistory": Immutable.List [
        Immutable.Map {
          "type": "agent",
          "from": "First Last",
        },
        Immutable.Map {
          "type": "agent",
          "from": "non-matching-from",
        },
        Immutable.Map {
          "type": "customer",
          "from": "123",
        },
      ],
    },
    Immutable.Map {
      "interactionId": "non-matching-interaction-id",
      "messageHistory": Immutable.List [
        Immutable.Map {
          "type": "agent",
          "from": "123",
        },
        Immutable.Map {
          "type": "agent",
          "from": "non-matching-from",
        },
        Immutable.Map {
          "type": "customer",
          "from": "123",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is not present on interactions does nothing 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-1",
        },
        Immutable.Map {
          "id": "resource-id-2",
        },
      ],
    },
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-2",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is present on interactions if resource has name properties sets the name of the resource 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-1",
        },
        Immutable.Map {
          "id": "resource-id-2",
          "name": "Tester Testingson",
        },
      ],
    },
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-2",
          "name": "Tester Testingson",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer UPDATE_RESOURCE_NAME if resource is present on interactions if resource has no name properties sets the name of the resource to be the resource's email 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-1",
        },
        Immutable.Map {
          "id": "resource-id-2",
          "name": "tester@testingson.com",
        },
      ],
    },
    Immutable.Map {
      "warmTransfers": Immutable.List [
        Immutable.Map {
          "id": "resource-id-2",
          "name": "tester@testingson.com",
        },
      ],
    },
  ],
}
`;

exports[`agentDesktopReducer WORK_INITIATED initializing neither voice nor sms interaction sets status to work-initiated 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "voice-interaction-id",
      "channelType": "voice",
    },
    Immutable.Map {
      "interactionId": "sms-interaction-id",
      "channelType": "sms",
    },
    Immutable.Map {
      "interactionId": "email-interaction-id",
      "channelType": "email",
      "status": "work-initiated",
    },
  ],
}
`;

exports[`agentDesktopReducer WORK_INITIATED initializing sms interaction sets status to work-initiated and customer with plus 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "voice-interaction-id",
      "channelType": "voice",
    },
    Immutable.Map {
      "interactionId": "sms-interaction-id",
      "channelType": "sms",
      "status": "work-initiated",
      "customer": "+new-customer",
    },
    Immutable.Map {
      "interactionId": "email-interaction-id",
      "channelType": "email",
    },
  ],
}
`;

exports[`agentDesktopReducer WORK_INITIATED initializing voice interaction sets status to work-initiated and number to customer 1`] = `
Immutable.Map {
  "interactions": Immutable.List [
    Immutable.Map {
      "interactionId": "voice-interaction-id",
      "channelType": "voice",
      "status": "work-initiated",
      "number": "new-customer",
    },
    Immutable.Map {
      "interactionId": "sms-interaction-id",
      "channelType": "sms",
    },
    Immutable.Map {
      "interactionId": "email-interaction-id",
      "channelType": "email",
    },
  ],
}
`;

exports[`agentDesktopReducer returns the correct initial state 1`] = `
Immutable.Map {
  "interactions": Immutable.List [],
  "queues": Immutable.List [],
  "loginPopup": Immutable.Map {
    "reauthPassword": "",
    "showLoginPopup": false,
  },
  "currentCrmItemHistoryPanel": Immutable.Map {
    "interactionId": "current-crm-item-history",
    "status": "current-crm-item-history",
    "isSidePanelCollapsed": true,
  },
  "expirationPromptReauth": Immutable.Map {
    "showConfirmationPopupGoReady": false,
  },
  "isInteractionsBarCollapsed": true,
  "newInteractionPanel": Immutable.Map {
    "contactMode": "view",
    "selectedSidePanelTab": "info",
    "query": Immutable.Map {},
    "interactionId": "creating-new-interaction",
    "visible": false,
    "status": "creating-new-interaction",
    "isSidePanelCollapsed": false,
    "newInteractionFormInput": "",
    "activeContactForm": Immutable.Map {
      "contactForm": Immutable.Map {},
      "formIsDirty": false,
      "selectedIndexes": Immutable.Map {},
      "showErrors": Immutable.Map {},
      "editingContacts": Immutable.List [],
      "formIsValid": false,
      "unusedFields": Immutable.Map {},
      "formErrors": Immutable.Map {},
      "saveLoading": false,
    },
  },
  "extensions": Immutable.List [],
  "sidePanelPx": 500,
  "noInteractionContactPanel": Immutable.Map {
    "contactMode": "search",
    "query": Immutable.Map {},
    "isSidePanelCollapsed": true,
    "selectedSidePanelTab": "info",
    "activeContactForm": Immutable.Map {
      "contactForm": Immutable.Map {},
      "formIsDirty": false,
      "selectedIndexes": Immutable.Map {},
      "showErrors": Immutable.Map {},
      "editingContacts": Immutable.List [],
      "formIsValid": false,
      "unusedFields": Immutable.Map {},
      "formErrors": Immutable.Map {},
      "saveLoading": false,
    },
  },
  "presenceReasonLists": Immutable.List [],
  "activeExtension": Immutable.Map {},
  "agentDirection": Immutable.Map {
    "direction": "inbound",
  },
  "refreshRequired": false,
  "isOnline": true,
  "presenceReason": Immutable.Map {},
  "sidePanelMaxPx": 500,
}
`;
