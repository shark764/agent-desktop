// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`goAcceptWork if active resources exist should be done after calling getUser for each resource 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAcceptWork if active resources exist should call getUser for each active resource 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "getUser",
          Object {
            "resourceId": "resource-1",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "getUser",
          Object {
            "resourceId": "resource-2",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
  ],
}
`;

exports[`goAcceptWork if active resources exist should dispatch setActiveResources 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "activeResources": Array [
          Object {
            "id": "resource-1",
          },
          Object {
            "id": "resource-2",
          },
        ],
        "interactionId": "interaction-id",
        "type": "app/AgentDesktop/SET_ACTIVE_RESOURCES",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAcceptWork if active resources exist should dispatch setInteractionStatus with work-accepted 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "interaction-id",
        "newStatus": "work-accepted",
        "response": Object {
          "activeResources": Array [
            Object {
              "id": "resource-1",
            },
            Object {
              "id": "resource-2",
            },
          ],
        },
        "type": "app/AgentDesktop/SET_INTERACTION_STATUS",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAcceptWork if no active resources exist should be done after dispatching action 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAcceptWork if no active resources exist should dispatch setInteractionStatus with work-accepted 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "interaction-id",
        "newStatus": "work-accepted",
        "response": Object {},
        "type": "app/AgentDesktop/SET_INTERACTION_STATUS",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel calls getInteraction with the interaction id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "creating-new-interaction",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel calls loadContactInteractions with the contact id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "contactId": "mock-contact-id",
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel is done 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel puts newInteractionPanelSelectContact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": Object {
          "id": "mock-contact-id",
        },
        "type": "app/AgentDesktop/NEW_INTERACTION_PANEL_SELECT_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel puts setContactSaveLoading to false 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "creating-new-interaction",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel puts setContactSaveLoading to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "creating-new-interaction",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is "creating-new-interaction" panel puts showContactsPanel 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "type": "app/AgentDesktop/SHOW_CONTACTS_PANEL",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search calls CxEngage.interactions.assignContact to new contact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "assignContact",
        Object {
          "contactId": "mock-contact-id",
          "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search calls CxEngage.interactions.unassignContact to old contact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "unassignContact",
        Object {
          "contactId": "old-contact-id",
          "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search calls getInteraction with the interaction id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search calls loadContactInteractions with the contact id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "contactId": "mock-contact-id",
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search is done 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAssignContact target is interaction with contactMode of search puts addContactNotification 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "notificationInfo": Object {
          "messageType": "assigned",
        },
        "type": "app/ContactsControl/ADD_CONTACT_NOTIFICATION",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search puts setAssignedContact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": Object {
          "id": "mock-contact-id",
        },
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "type": "app/AgentDesktop/SET_ASSIGNED_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search puts setContactMode to search 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "newMode": "view",
        "type": "app/AgentDesktop/SET_CONTACT_MODE",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search puts setContactSaveLoading to false 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is interaction with contactMode of search puts setContactSaveLoading to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is noInteractionContactPanel calls getInteraction with the interaction id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        undefined,
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is noInteractionContactPanel calls loadContactInteractions with the contact id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "contactId": "mock-contact-id",
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is noInteractionContactPanel is done 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAssignContact target is noInteractionContactPanel puts selectContact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": Object {
          "id": "mock-contact-id",
        },
        "type": "app/AgentDesktop/SELECT_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is noInteractionContactPanel puts setContactSaveLoading to false 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": undefined,
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is noInteractionContactPanel puts setContactSaveLoading to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": undefined,
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) calls getInteraction with the interaction id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "non-uuid",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) calls loadContactInteractions with the contact id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "contactId": "mock-contact-id",
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) is done 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) puts setAssignedContact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": Object {
          "id": "mock-contact-id",
        },
        "interactionId": "non-uuid",
        "type": "app/AgentDesktop/SET_ASSIGNED_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) puts setContactSaveLoading to false 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "non-uuid",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is non-UUID interaction (outbound) puts setContactSaveLoading to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "non-uuid",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is script-only interaction calls getInteraction with the interaction id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is script-only interaction calls loadContactInteractions with the contact id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        Object {
          "contactId": "mock-contact-id",
        },
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goAssignContact target is script-only interaction is done 1`] = `
Object {
  "done": true,
  "value": undefined,
}
`;

exports[`goAssignContact target is script-only interaction puts setAssignedContact 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contact": Object {
          "id": "mock-contact-id",
        },
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "type": "app/AgentDesktop/SET_ASSIGNED_CONTACT",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is script-only interaction puts setContactSaveLoading to false 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "isLoading": false,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goAssignContact target is script-only interaction puts setContactSaveLoading to true 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "6a94e45e-5c37-11e7-907b-a6006ad3dba0",
        "isLoading": true,
        "type": "app/ContactsControl/SET_CONTACT_SAVE_LOADING",
      },
      "channel": null,
    },
  },
}
`;

exports[`goDeleteContacts when action.reasonIds is an array of Ids should call the promise util with the SDK goDeleteContacts and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "deleteContacts",
          Object {
            "contactId": "reasonId1",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "deleteContacts",
          Object {
            "contactId": "reasonId2",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
  ],
}
`;

exports[`goDeleteContacts when action.reasonIds is an array of Ids when API responds with a false bool for contactId1 and a true bool for 2 should only dispatch a removeContact action contactId2 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId2",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
  ],
}
`;

exports[`goDeleteContacts when action.reasonIds is an array of Ids when API responds with true bools should use the yielded SDK responses to dispatch a removeContact action for each contactId 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId1",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId2",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
  ],
}
`;

exports[`goNotReady when action.reason is defined should use the yielded id to call the promise util with the SDK goNotReady and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "goNotReady",
        Object {
          "reasonInfo": Object {
            "reason": "mockReasonName",
            "reasonId": "mockReasonId",
            "reasonListId": "mockReasonListId",
          },
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goNotReady when action.reason is undefined should call the promise util with the SDK goNotReady and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "goNotReady",
        Object {},
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is defined should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
          "page": 1,
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are equal to returned results length should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are equal to returned results length should dispatch a setContactInteractionHistory action with results, results data and earliestTimestamp from the last result of the SDK call 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactId": "mockContactId",
        "response": Object {
          "earliestTimestamp": "mockTimestamp3",
          "limit": 3,
          "page": 0,
          "results": Array [
            Object {
              "startTimestamp": "mockTimestamp1",
            },
            Object {
              "startTimestamp": "mockTimestamp2",
            },
            Object {
              "startTimestamp": "mockTimestamp3",
            },
          ],
          "total": 3,
        },
        "type": "app/AgentDesktop/SET_CONTACT_INTERACTION_HISTORY",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should call the promise util with SDK getContactHistory with the final page derived from limit and total 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
          "page": 3,
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should dispatch a setContactInteractionHistory action with results, results data and earliestTimestamp from the last result of the 2nd SDK call 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactId": "mockContactId",
        "response": Object {
          "earliestTimestamp": "mockTimestamp3",
          "limit": 3,
          "page": 0,
          "results": Array [
            Object {
              "startTimestamp": "mockTimestamp1",
            },
            Object {
              "startTimestamp": "mockTimestamp2",
            },
            Object {
              "startTimestamp": "mockTimestamp3",
            },
          ],
          "total": 10,
        },
        "type": "app/AgentDesktop/SET_CONTACT_INTERACTION_HISTORY",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is recordings should call the promise util with the SDK getRecordings function with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockGetRecordingsFunction",
        Object {
          "interactionId": "mockId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is recordings should use the yielded SDK results to dispatch an updateContactHistoryInteractionDetails action with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionDetails": Object {
          "audioRecordings": Array [
            "mockRecordingUrl",
          ],
        },
        "interactionId": "mockId",
        "type": "app/AgentDesktop/UPDATE_CONTACT_HISTORY_INTERACTION_DETAILS",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should call axios get with the 1st returned transcript url 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockTranscriptUrl",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should call the promise util with the SDK getTranscripts function with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockGetTranscriptsFunction",
        Object {
          "interactionId": "mockId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should use the yielded SDK results to dispatch an updateContactHistoryInteractionDetails action with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionDetails": Object {
          "transcript": "mockTranscript",
        },
        "interactionId": "mockId",
        "type": "app/AgentDesktop/UPDATE_CONTACT_HISTORY_INTERACTION_DETAILS",
      },
      "channel": null,
    },
  },
}
`;
