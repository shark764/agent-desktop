// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`goDeleteContacts when action.reasonIds is an array of Ids should call the promise util with the SDK goDeleteContacts and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "deleteContacts",
          Object {
            "contactId": "reasonId1",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
    Object {
      "@@redux-saga/IO": true,
      "CALL": Object {
        "args": Array [
          "deleteContacts",
          Object {
            "contactId": "reasonId2",
          },
          "AgentDesktop",
        ],
        "context": null,
        "fn": [Function],
      },
    },
  ],
}
`;

exports[`goDeleteContacts when action.reasonIds is an array of Ids when API responds with a false bool for contactId1 and a true bool for 2 should only dispatch a removeContact action contactId2 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId2",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
  ],
}
`;

exports[`goDeleteContacts when action.reasonIds is an array of Ids when API responds with true bools should use the yielded SDK responses to dispatch a removeContact action for each contactId 1`] = `
Object {
  "done": false,
  "value": Array [
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId1",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
    Object {
      "@@redux-saga/IO": true,
      "PUT": Object {
        "action": Object {
          "contactId": "reasonId2",
          "type": "app/AgentDesktop/REMOVE_CONTACT",
        },
        "channel": null,
      },
    },
  ],
}
`;

exports[`goNotReady when action.reason is defined should use the yielded id to call the promise util with the SDK goNotReady and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "goNotReady",
        Object {
          "reasonInfo": Object {
            "reason": "mockReasonName",
            "reasonId": "mockReasonId",
            "reasonListId": "mockReasonListId",
          },
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`goNotReady when action.reason is undefined should call the promise util with the SDK goNotReady and the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "goNotReady",
        Object {},
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is defined should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
          "page": 1,
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are equal to returned results length should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are equal to returned results length should dispatch a setContactInteractionHistory action with results, results data and earliestTimestamp from the last result of the SDK call 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactId": "mockContactId",
        "response": Object {
          "earliestTimestamp": "mockTimestamp3",
          "limit": 3,
          "page": 0,
          "results": Array [
            Object {
              "startTimestamp": "mockTimestamp1",
            },
            Object {
              "startTimestamp": "mockTimestamp2",
            },
            Object {
              "startTimestamp": "mockTimestamp3",
            },
          ],
          "total": 3,
        },
        "type": "app/AgentDesktop/SET_CONTACT_INTERACTION_HISTORY",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should call the promise util with SDK getContactHistory with the final page derived from limit and total 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
          "page": 3,
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should call the promise util with the SDK getContactHistory with the correct arguments 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getContactInteractionHistory",
        Object {
          "contactId": "mockContactId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadContactInteractions when action.page is undefined when total results are greater than returned results length should dispatch a setContactInteractionHistory action with results, results data and earliestTimestamp from the last result of the 2nd SDK call 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "contactId": "mockContactId",
        "response": Object {
          "earliestTimestamp": "mockTimestamp3",
          "limit": 3,
          "page": 0,
          "results": Array [
            Object {
              "startTimestamp": "mockTimestamp1",
            },
            Object {
              "startTimestamp": "mockTimestamp2",
            },
            Object {
              "startTimestamp": "mockTimestamp3",
            },
          ],
          "total": 10,
        },
        "type": "app/AgentDesktop/SET_CONTACT_INTERACTION_HISTORY",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is recordings should call the promise util with the SDK getRecordings function with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockGetRecordingsFunction",
        Object {
          "interactionId": "mockId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is recordings should use the yielded SDK results to dispatch an updateContactHistoryInteractionDetails action with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionDetails": Object {
          "audioRecordings": Array [
            "mockRecordingUrl",
          ],
        },
        "interactionId": "mockId",
        "type": "app/AgentDesktop/UPDATE_CONTACT_HISTORY_INTERACTION_DETAILS",
      },
      "channel": null,
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should call axios get with the 1st returned transcript url 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockTranscriptUrl",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should call the promise util with the SDK getTranscripts function with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "mockGetTranscriptsFunction",
        Object {
          "interactionId": "mockId",
        },
        "AgentDesktop",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`loadHistoricalInteractionBody Saga if bodyType is transcript should use the yielded SDK results to dispatch an updateContactHistoryInteractionDetails action with the correct args 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionDetails": Object {
          "transcript": "mockTranscript",
        },
        "interactionId": "mockId",
        "type": "app/AgentDesktop/UPDATE_CONTACT_HISTORY_INTERACTION_DETAILS",
      },
      "channel": null,
    },
  },
}
`;
