// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`callTransferListsAndUpdateState when transferListsHiddenState not saved in localStorage calls the promise util with the SDK getTransferLists function to get the active transferLists 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getTransferListsFunction",
        Object {
          "path": Array [
            "users",
            "agentId",
            "transfer-lists",
          ],
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState not saved in localStorage gets localStorage properties that are used to set transferListHiddenState 1`] = `
Array [
  Array [
    "transferListHiddenState-mockTransferListId-tenantId-agentId",
  ],
]
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState not saved in localStorage selects tenant and agent id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState not saved in localStorage sets transferLists state by dispatching getAndSetTransferLists action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferLists": Array [
          Object {
            "endpoints": Array [
              Object {
                "endpoint": "mockEndPointId",
                "hierarchy": "mockHierarchyTitle",
                "name": "mockHierarchyName",
              },
            ],
            "id": "mockTransferListId",
            "name": "mockTransferListName",
          },
        ],
        "type": "app/TransferMenu/SET_TRANSFER_LISTS",
      },
      "channel": null,
    },
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState not saved in localStorage sets transferListsVisibleState to true by dispatching setTransferListsVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferListsVisibleState": Object {
          "mockTransferListId": true,
        },
        "type": "app/TransferMenu/SET_TRANSFER_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState saved in localStorage calls the promise util with the SDK getTransferLists function to get the active transferLists 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getTransferListsFunction",
        Object {
          "path": Array [
            "users",
            "agentId",
            "transfer-lists",
          ],
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState saved in localStorage gets localStorage properties that are used to set transferListHiddenState 1`] = `
Array [
  Array [
    "transferListHiddenState-mockTransferListId-tenantId-agentId",
  ],
]
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState saved in localStorage selects tenant and agent id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState saved in localStorage sets transferLists state by dispatching getAndSetTransferLists action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferLists": Array [
          Object {
            "endpoints": Array [
              Object {
                "endpoint": "mockEndPointId",
                "hierarchy": "mockHierarchyTitle",
                "name": "mockHierarchyName",
              },
            ],
            "id": "mockTransferListId",
            "name": "mockTransferListName",
          },
        ],
        "type": "app/TransferMenu/SET_TRANSFER_LISTS",
      },
      "channel": null,
    },
  },
}
`;

exports[`callTransferListsAndUpdateState when transferListsHiddenState saved in localStorage sets transferListsVisibleState to false by dispatching setTransferListsVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferListsVisibleState": Object {
          "mockTransferListId": false,
        },
        "type": "app/TransferMenu/SET_TRANSFER_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`changeAgentsListVisibleState collpase/expand agentsList Transfer options selects tenant-id, agent-id and previous agentsListVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`changeAgentsListVisibleState collpase/expand agentsList Transfer options updates agentsListVisibleState to false by dispatching setAgentsListVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "agentsListVisibleState": false,
        "type": "app/TransferMenu/SET_AGENTS_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`changeAgentsListVisibleState collpase/expand agentsList Transfer options updates localStorage with agentsListVisibleState set to false 1`] = `
Array [
  Array [
    "agentsListVisibleState-tenantId-agentId",
    false,
  ],
]
`;

exports[`changeQueuesListVisibleState collpase/expand queuesList Transfer options selects tenant-id, agent-id and previous queuesListVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`changeQueuesListVisibleState collpase/expand queuesList Transfer options updates localStorage with queuesListVisibleState set to false 1`] = `
Array [
  Array [
    "queuesListVisibleState-tenantId-agentId",
    false,
  ],
]
`;

exports[`changeQueuesListVisibleState collpase/expand queuesList Transfer options updates queuesListVisibleState to false by dispatching setQueuesListVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "queuesListVisibleState": false,
        "type": "app/TransferMenu/SET_QUEUES_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`changeTransferListVisibleState collpase/expand transferLists Transfer options selects tenant-id, agent-id and previous transferListVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`changeTransferListVisibleState collpase/expand transferLists Transfer options updates localStorage with transferListVisibleState set to false 1`] = `
Array [
  Array [
    "transferListHiddenState-mockTransferListId-tenantId-agentId",
    false,
  ],
]
`;

exports[`changeTransferListVisibleState collpase/expand transferLists Transfer options updates transferListVisibleState to false by dispatching setTransferListsVisibleState 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferListsVisibleState": Object {
          "mockTransferListId": false,
        },
        "type": "app/TransferMenu/SET_TRANSFER_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState not saved in localStorage gets localStorage properties that are used to set queuesListVisibleState and agentsListVisibleState 1`] = `
Array [
  Array [
    "queuesListVisibleState-tenantId-agentId",
  ],
  Array [
    "agentsListVisibleState-tenantId-agentId",
  ],
]
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState not saved in localStorage selects tenant and agent id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState not saved in localStorage sets agentsListVisibleState to true by dispatching setAgentsListVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "agentsListVisibleState": true,
        "type": "app/TransferMenu/SET_AGENTS_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState not saved in localStorage sets queuesListVisibleState to true by dispatching setQueuesListVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "queuesListVisibleState": true,
        "type": "app/TransferMenu/SET_QUEUES_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState saved in localStorage gets localStorage properties that are used to set queuesListVisibleState and agentsListVisibleState 1`] = `
Array [
  Array [
    "queuesListVisibleState-tenantId-agentId",
  ],
  Array [
    "agentsListVisibleState-tenantId-agentId",
  ],
]
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState saved in localStorage selects tenant and agent id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState saved in localStorage sets agentsListVisibleState to false by dispatching setAgentsListVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "agentsListVisibleState": false,
        "type": "app/TransferMenu/SET_AGENTS_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`setAgentsQueuesInitialVisibleState when queuesListHiddenState and agentsListHiddenState saved in localStorage sets queuesListVisibleState to false by dispatching setQueuesListVisibleState action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "queuesListVisibleState": false,
        "type": "app/TransferMenu/SET_QUEUES_LIST_VISIBLE_STATE",
      },
      "channel": null,
    },
  },
}
`;

exports[`tearDownTransferMenuStates sets showTransferDialpad to its default state 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "showTransferDialpad": false,
        "type": "app/TransferMenu/SET_SHOW_TRANSFER_DIAL_PAD",
      },
      "channel": null,
    },
  },
}
`;

exports[`tearDownTransferMenuStates sets transferSearchInput to its default state 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferSearchInput": "",
        "type": "app/TransferMenu/SET_TRANSFER_SEARCH_INPUT",
      },
      "channel": null,
    },
  },
}
`;

exports[`tearDownTransferMenuStates sets transferTabIndex to its default state 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferTabIndex": 0,
        "type": "app/TransferMenu/SET_TRANSFER_TAB_INDEX",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a queue calls CxEngage.interactions.transferToQueue 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "queueId": "queue1",
          "transferType": "cold",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a queue calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a queue dispatches setIsColdTransferring to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": true,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a queue gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a resource calls CxEngage.interactions.transferToResource 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "resourceId": "resId1",
          "transferType": "cold",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a resource calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a resource dispatches setIsColdTransferring to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": true,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction to a resource gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction when not passing neither a resource, queue or a transfer extension calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction when not passing neither a resource, queue or a transfer extension dispatches setIsColdTransferring to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": true,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a nonvoice interaction when not passing neither a resource, queue or a transfer extension gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction Making a cold transfer of a voice interaction to a transferExtension calls CxEngage.interactions.transferToExtension 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "transferExtension": "transferExtension1",
          "transferType": "cold",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a voice interaction to a transferExtension calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a voice interaction to a transferExtension dispatches setIsColdTransferring to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": true,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a cold transfer of a voice interaction to a transferExtension gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction Making a warm transfer of a voice interaction when not passing neither a resource, queue or a transfer extension calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a warm transfer of a voice interaction when not passing neither a resource, queue or a transfer extension gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction Making a warm transfer of voice interaction to a resource calls CxEngage.interactions.transferToResource 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "resourceId": "resId1",
          "transferType": "warm",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a warm transfer of voice interaction to a resource calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction Making a warm transfer of voice interaction to a resource dispatch startWarmTransfering to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "transferringTo": Object {
          "id": "resId1",
          "name": "Agent 1",
          "type": "agent",
        },
        "type": "app/AgentDesktop/START_WARM_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction Making a warm transfer of voice interaction to a resource gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a cold transfer of a voice interaction to a resource CxEngage.interactions.transferToResource call fails, its error gets logged in console and setIsColdTransferring is called again 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": false,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a cold transfer of a voice interaction to a resource calls CxEngage.interactions.transferToResource 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "resourceId": "resId1",
          "transferType": "cold",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a cold transfer of a voice interaction to a resource calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a cold transfer of a voice interaction to a resource dispatches setIsColdTransferring to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "isColdTransferring": true,
        "type": "app/AgentDesktop/SET_IS_COLD_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a cold transfer of a voice interaction to a resource gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a warm transfer of a voice interaction to a resource CxEngage.interactions.transferToResource call fails, its error gets logged in console and transferCancelled is dispatched 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "type": "app/AgentDesktop/TRANSFER_CANCELLED",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a warm transfer of a voice interaction to a resource calls CxEngage.interactions.transferToResource 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        [MockFunction],
        Object {
          "interactionId": "id1",
          "resourceId": "resId1",
          "transferType": "warm",
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a warm transfer of a voice interaction to a resource calls setShowTransferMenu 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a warm transfer of a voice interaction to a resource dispatch startWarmTransfering to the store 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "interactionId": "id1",
        "transferringTo": Object {
          "id": "resId1",
          "name": "Agent 1",
          "type": "agent",
        },
        "type": "app/AgentDesktop/START_WARM_TRANSFERRING",
      },
      "channel": null,
    },
  },
}
`;

exports[`transferInteraction call to CxEngage.interaction.transferToResource fails when trying to make a warm transfer of a voice interaction to a resource gets the interaction id, and channel type from the selected interaction and the index of the transfer tab 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`when no transferLists are available calls the promise util with the SDK getTransferLists function to get the active transferLists 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "CALL": Object {
      "args": Array [
        "getTransferListsFunction",
        Object {
          "path": Array [
            "users",
            "agentId",
            "transfer-lists",
          ],
        },
        "TransferMenu",
      ],
      "context": null,
      "fn": [Function],
    },
  },
}
`;

exports[`when no transferLists are available selects tenant and agent id 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "ALL": Array [
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
      Object {
        "@@redux-saga/IO": true,
        "SELECT": Object {
          "args": Array [],
          "selector": [Function],
        },
      },
    ],
  },
}
`;

exports[`when no transferLists are available sets transferLists state by dispatching getAndSetTransferLists action 1`] = `
Object {
  "done": false,
  "value": Object {
    "@@redux-saga/IO": true,
    "PUT": Object {
      "action": Object {
        "transferLists": "noTransferListsAvailable",
        "type": "app/TransferMenu/SET_TRANSFER_LISTS",
      },
      "channel": null,
    },
  },
}
`;
